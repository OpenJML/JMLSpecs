package java.util.stream;

public final class Collectors {
//    static final java.util.Set<Collector$Characteristics> CH_CONCURRENT_ID;
//    static final java.util.Set<Collector$Characteristics> CH_CONCURRENT_NOID;
//    static final java.util.Set<Collector$Characteristics> CH_ID;
//    static final java.util.Set<Collector$Characteristics> CH_UNORDERED_ID;
//    static final java.util.Set<Collector$Characteristics> CH_NOID;
//    private Collectors();
//    private static <T> java.util.function.BinaryOperator<T> throwingMerger();
//    private static <I, R> java.util.function.Function<I, R> castingIdentity();
//    public static <T, C extends java.util.Collection<T>> Collector<T, ?, C> toCollection(java.util.function.Supplier<C>);

    //@ public normal_behavior
    //@   ensures true;
    //@ pure
    public static <T> Collector<T, ?, java.util.List<T>> toList();
    //@ public normal_behavior
    //@   ensures true;
    //@ pure
    public static <T> Collector<T, ?, java.util.Set<T>> toSet();

    //    public static Collector<java.lang.CharSequence, ?, java.lang.String> joining();
//    public static Collector<java.lang.CharSequence, ?, java.lang.String> joining(java.lang.CharSequence);
//    public static Collector<java.lang.CharSequence, ?, java.lang.String> joining(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence);
//    private static <K, V, M extends java.util.Map<K, V>> java.util.function.BinaryOperator<M> mapMerger(java.util.function.BinaryOperator<V>);
//    public static <T, U, A, R> Collector<T, ?, R> mapping(java.util.function.Function<? super T, ? extends U>, Collector<? super U, A, R>);
//    public static <T, A, R, RR> Collector<T, A, RR> collectingAndThen(Collector<T, A, R>, java.util.function.Function<R, RR>);
//    public static <T> Collector<T, ?, java.lang.Long> counting();
//    public static <T> Collector<T, ?, java.util.Optional<T>> minBy(java.util.Comparator<? super T>);
//    public static <T> Collector<T, ?, java.util.Optional<T>> maxBy(java.util.Comparator<? super T>);
//    public static <T> Collector<T, ?, java.lang.Integer> summingInt(java.util.function.ToIntFunction<? super T>);
//    public static <T> Collector<T, ?, java.lang.Long> summingLong(java.util.function.ToLongFunction<? super T>);
//    public static <T> Collector<T, ?, java.lang.Double> summingDouble(java.util.function.ToDoubleFunction<? super T>);
//    static double[] sumWithCompensation(double[], double);
//    static double computeFinalSum(double[]);
//    public static <T> Collector<T, ?, java.lang.Double> averagingInt(java.util.function.ToIntFunction<? super T>);
//    public static <T> Collector<T, ?, java.lang.Double> averagingLong(java.util.function.ToLongFunction<? super T>);
//    public static <T> Collector<T, ?, java.lang.Double> averagingDouble(java.util.function.ToDoubleFunction<? super T>);
//    public static <T> Collector<T, ?, T> reducing(T, java.util.function.BinaryOperator<T>);
//    private static <T> java.util.function.Supplier<T[]> boxSupplier(T);
//    public static <T> Collector<T, ?, java.util.Optional<T>> reducing(java.util.function.BinaryOperator<T>);
//    public static <T, U> Collector<T, ?, U> reducing(U, java.util.function.Function<? super T, ? extends U>, java.util.function.BinaryOperator<U>);
//    public static <T, K> Collector<T, ?, java.util.Map<K, java.util.List<T>>> groupingBy(java.util.function.Function<? super T, ? extends K>);
//    public static <T, K, A, D> Collector<T, ?, java.util.Map<K, D>> groupingBy(java.util.function.Function<? super T, ? extends K>, Collector<? super T, A, D>);
//    public static <T, K, D, A, M extends java.util.Map<K, D>> Collector<T, ?, M> groupingBy(java.util.function.Function<? super T, ? extends K>, java.util.function.Supplier<M>, Collector<? super T, A, D>);
//    public static <T, K> Collector<T, ?, java.util.concurrent.ConcurrentMap<K, java.util.List<T>>> groupingByConcurrent(java.util.function.Function<? super T, ? extends K>);
//    public static <T, K, A, D> Collector<T, ?, java.util.concurrent.ConcurrentMap<K, D>> groupingByConcurrent(java.util.function.Function<? super T, ? extends K>, Collector<? super T, A, D>);
//    public static <T, K, A, D, M extends java.util.concurrent.ConcurrentMap<K, D>> Collector<T, ?, M> groupingByConcurrent(java.util.function.Function<? super T, ? extends K>, java.util.function.Supplier<M>, Collector<? super T, A, D>);
//    public static <T> Collector<T, ?, java.util.Map<java.lang.Boolean, java.util.List<T>>> partitioningBy(java.util.function.Predicate<? super T>);
//    public static <T, D, A> Collector<T, ?, java.util.Map<java.lang.Boolean, D>> partitioningBy(java.util.function.Predicate<? super T>, Collector<? super T, A, D>);
//    public static <T, K, U> Collector<T, ?, java.util.Map<K, U>> toMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>);
//    public static <T, K, U> Collector<T, ?, java.util.Map<K, U>> toMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>, java.util.function.BinaryOperator<U>);
//    public static <T, K, U, M extends java.util.Map<K, U>> Collector<T, ?, M> toMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>, java.util.function.BinaryOperator<U>, java.util.function.Supplier<M>);
//    public static <T, K, U> Collector<T, ?, java.util.concurrent.ConcurrentMap<K, U>> toConcurrentMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>);
//    public static <T, K, U> Collector<T, ?, java.util.concurrent.ConcurrentMap<K, U>> toConcurrentMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>, java.util.function.BinaryOperator<U>);
//    public static <T, K, U, M extends java.util.concurrent.ConcurrentMap<K, U>> Collector<T, ?, M> toConcurrentMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends U>, java.util.function.BinaryOperator<U>, java.util.function.Supplier<M>);
//    public static <T> Collector<T, ?, java.util.IntSummaryStatistics> summarizingInt(java.util.function.ToIntFunction<? super T>);
//    public static <T> Collector<T, ?, java.util.LongSummaryStatistics> summarizingLong(java.util.function.ToLongFunction<? super T>);
//    public static <T> Collector<T, ?, java.util.DoubleSummaryStatistics> summarizingDouble(java.util.function.ToDoubleFunction<? super T>);
//    private static java.util.DoubleSummaryStatistics lambda$summarizingDouble$65(java.util.DoubleSummaryStatistics, java.util.DoubleSummaryStatistics);
//    private static void lambda$summarizingDouble$64(java.util.function.ToDoubleFunction, java.util.DoubleSummaryStatistics, java.lang.Object);
//    private static java.util.LongSummaryStatistics lambda$summarizingLong$63(java.util.LongSummaryStatistics, java.util.LongSummaryStatistics);
//    private static void lambda$summarizingLong$62(java.util.function.ToLongFunction, java.util.LongSummaryStatistics, java.lang.Object);
//    private static java.util.IntSummaryStatistics lambda$summarizingInt$61(java.util.IntSummaryStatistics, java.util.IntSummaryStatistics);
//    private static void lambda$summarizingInt$60(java.util.function.ToIntFunction, java.util.IntSummaryStatistics, java.lang.Object);
//    private static void lambda$toConcurrentMap$59(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, java.util.concurrent.ConcurrentMap, java.lang.Object);
//    private static void lambda$toMap$58(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, java.util.Map, java.lang.Object);
//    private static java.util.Map lambda$partitioningBy$57(Collector, Collectors$Partition);
//    private static Collectors$Partition lambda$partitioningBy$56(Collector);
//    private static Collectors$Partition lambda$partitioningBy$55(java.util.function.BinaryOperator, Collectors$Partition, Collectors$Partition);
//    private static void lambda$partitioningBy$54(java.util.function.BiConsumer, java.util.function.Predicate, Collectors$Partition, java.lang.Object);
//    private static java.util.concurrent.ConcurrentMap lambda$groupingByConcurrent$53(java.util.function.Function, java.util.concurrent.ConcurrentMap);
//    private static java.lang.Object lambda$null$52(java.util.function.Function, java.lang.Object, java.lang.Object);
//    private static void lambda$groupingByConcurrent$51(java.util.function.Function, java.util.function.Supplier, java.util.function.BiConsumer, java.util.concurrent.ConcurrentMap, java.lang.Object);
//    private static java.lang.Object lambda$null$50(java.util.function.Supplier, java.lang.Object);
//    private static void lambda$groupingByConcurrent$49(java.util.function.Function, java.util.function.Supplier, java.util.function.BiConsumer, java.util.concurrent.ConcurrentMap, java.lang.Object);
//    private static java.lang.Object lambda$null$48(java.util.function.Supplier, java.lang.Object);
//    private static java.util.Map lambda$groupingBy$47(java.util.function.Function, java.util.Map);
//    private static java.lang.Object lambda$null$46(java.util.function.Function, java.lang.Object, java.lang.Object);
//    private static void lambda$groupingBy$45(java.util.function.Function, java.util.function.Supplier, java.util.function.BiConsumer, java.util.Map, java.lang.Object);
//    private static java.lang.Object lambda$null$44(java.util.function.Supplier, java.lang.Object);
//    private static java.lang.Object lambda$reducing$43(java.lang.Object[]);
//    private static java.lang.Object[] lambda$reducing$42(java.util.function.BinaryOperator, java.lang.Object[], java.lang.Object[]);
//    private static void lambda$reducing$41(java.util.function.BinaryOperator, java.util.function.Function, java.lang.Object[], java.lang.Object);
//    private static java.util.Optional lambda$reducing$40(Collectors$1OptionalBox);
//    private static Collectors$1OptionalBox lambda$reducing$39(Collectors$1OptionalBox, Collectors$1OptionalBox);
//    private static Collectors$1OptionalBox lambda$reducing$38(java.util.function.BinaryOperator);
//    private static java.lang.Object[] lambda$boxSupplier$37(java.lang.Object);
//    private static java.lang.Object lambda$reducing$36(java.lang.Object[]);
//    private static java.lang.Object[] lambda$reducing$35(java.util.function.BinaryOperator, java.lang.Object[], java.lang.Object[]);
//    private static void lambda$reducing$34(java.util.function.BinaryOperator, java.lang.Object[], java.lang.Object);
//    private static java.lang.Double lambda$averagingDouble$33(double[]);
//    private static double[] lambda$averagingDouble$32(double[], double[]);
//    private static void lambda$averagingDouble$31(java.util.function.ToDoubleFunction, double[], java.lang.Object);
//    private static double[] lambda$averagingDouble$30();
//    private static java.lang.Double lambda$averagingLong$29(long[]);
//    private static long[] lambda$averagingLong$28(long[], long[]);
//    private static void lambda$averagingLong$27(java.util.function.ToLongFunction, long[], java.lang.Object);
//    private static long[] lambda$averagingLong$26();
//    private static java.lang.Double lambda$averagingInt$25(long[]);
//    private static long[] lambda$averagingInt$24(long[], long[]);
//    private static void lambda$averagingInt$23(java.util.function.ToIntFunction, long[], java.lang.Object);
//    private static long[] lambda$averagingInt$22();
//    private static java.lang.Double lambda$summingDouble$21(double[]);
//    private static double[] lambda$summingDouble$20(double[], double[]);
//    private static void lambda$summingDouble$19(java.util.function.ToDoubleFunction, double[], java.lang.Object);
//    private static double[] lambda$summingDouble$18();
//    private static java.lang.Long lambda$summingLong$17(long[]);
//    private static long[] lambda$summingLong$16(long[], long[]);
//    private static void lambda$summingLong$15(java.util.function.ToLongFunction, long[], java.lang.Object);
//    private static long[] lambda$summingLong$14();
//    private static java.lang.Integer lambda$summingInt$13(int[]);
//    private static int[] lambda$summingInt$12(int[], int[]);
//    private static void lambda$summingInt$11(java.util.function.ToIntFunction, int[], java.lang.Object);
//    private static int[] lambda$summingInt$10();
//    private static java.lang.Long lambda$counting$9(java.lang.Object);
//    private static void lambda$mapping$8(java.util.function.BiConsumer, java.util.function.Function, java.lang.Object, java.lang.Object);
//    private static java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator, java.util.Map, java.util.Map);
//    private static java.util.StringJoiner lambda$joining$6(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence);
//    private static java.lang.StringBuilder lambda$joining$5(java.lang.StringBuilder, java.lang.StringBuilder);
//    private static java.util.Set lambda$toSet$4(java.util.Set, java.util.Set);
//    private static java.util.List lambda$toList$3(java.util.List, java.util.List);
//    private static java.util.Collection lambda$toCollection$2(java.util.Collection, java.util.Collection);
//    private static java.lang.Object lambda$castingIdentity$1(java.lang.Object);
//    private static java.lang.Object lambda$throwingMerger$0(java.lang.Object, java.lang.Object);
//    static java.util.function.Function access$000();
//    static {};
}
