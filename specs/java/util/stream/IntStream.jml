package java.util.stream;

//@ non_null_by_default
public interface IntStream extends BaseStream<Integer,IntStream> {
      public abstract IntStream filter(java.util.function.IntPredicate pred);
      public abstract IntStream map(java.util.function.IntUnaryOperator op);
      public abstract <U> Stream<U> mapToObj(java.util.function.IntFunction<? extends U> func);
      public abstract LongStream mapToLong(java.util.function.IntToLongFunction func);
      public abstract DoubleStream mapToDouble(java.util.function.IntToDoubleFunction func);
      public abstract IntStream flatMap(java.util.function.IntFunction<? extends IntStream> func);
      public abstract IntStream distinct();
      public abstract IntStream sorted();
      public abstract IntStream peek(java.util.function.IntConsumer consumer);
      public abstract IntStream limit(long limit);
      public abstract IntStream skip(long n);
      public abstract void forEach(java.util.function.IntConsumer consumer);
      public abstract void forEachOrdered(java.util.function.IntConsumer consumer);
      public abstract int[] toArray();
      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public abstract int reduce(int n, java.util.function.IntBinaryOperator op);
      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public abstract java.util.OptionalInt reduce(java.util.function.IntBinaryOperator op);
      public abstract <R> R collect(java.util.function.Supplier<R> supplier, java.util.function.ObjIntConsumer<R> consumer, java.util.function.BiConsumer<R, R> consumer2);
      public abstract int sum();
      public abstract java.util.OptionalInt min();
      public abstract java.util.OptionalInt max();
      public abstract long count();
      public abstract java.util.OptionalDouble average();
      public abstract java.util.IntSummaryStatistics summaryStatistics();
      public abstract boolean anyMatch(java.util.function.IntPredicate pred);
      public abstract boolean allMatch(java.util.function.IntPredicate pred);
      public abstract boolean noneMatch(java.util.function.IntPredicate pred);
      public abstract java.util.OptionalInt findFirst();
      public abstract java.util.OptionalInt findAny();
      public abstract LongStream asLongStream();
      public abstract DoubleStream asDoubleStream();
      public abstract Stream<java.lang.Integer> boxed();
      
      //@ also public normal_behavior
      //@   ensures true;
      //@ pure
      public abstract IntStream sequential();
      public abstract IntStream parallel();
      public abstract java.util.PrimitiveIterator.OfInt iterator();
      public abstract java.util.Spliterator.OfInt spliterator();
      public static IntStream.Builder builder();
      public static IntStream empty();
      public static IntStream of(int i);
      public static IntStream of(int... ints);
      public static IntStream iterate(int i, java.util.function.IntUnaryOperator op);
      public static IntStream generate(java.util.function.IntSupplier supplier);
      public static IntStream range(int from, int to);
      public static IntStream rangeClosed(int from, int to);
      public static IntStream concat(IntStream first, IntStream last);
      public BaseStream parallel();

      //@ also public normal_behavior
      //@   ensures true;
      //@ pure
      public BaseStream sequential();
      public java.util.Spliterator spliterator();
      public java.util.Iterator iterator();
}
