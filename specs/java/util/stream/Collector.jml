package java.util.stream;

public interface Collector<T, A, R> {
    
  //@ model public instance JMLDataGroup content;
    
  public abstract java.util.function.Supplier<A> supplier();
  public abstract java.util.function.BiConsumer<A, T> accumulator();
  public abstract java.util.function.BinaryOperator<A> combiner();
  public abstract java.util.function.Function<A, R> finisher();
  public abstract java.util.Set<java.util.stream.Collector.Characteristics> characteristics();
  public static <T, R> Collector<T, R, R> of(java.util.function.Supplier<R> supplier, java.util.function.BiConsumer<R, T> consumer, java.util.function.BinaryOperator<R> op, java.util.stream.Collector.Characteristics... args);
  public static <T, A, R> Collector<T, A, R> of(java.util.function.Supplier<A> supplier, java.util.function.BiConsumer<A, T> consumer, java.util.function.BinaryOperator<A> op, java.util.function.Function<A, R> fcn, java.util.stream.Collector.Characteristics... args);

  public enum Characteristics { // implicitly static and final
	  CONCURRENT, UNORDERED, IDENTITY_FINISH
  }
}
