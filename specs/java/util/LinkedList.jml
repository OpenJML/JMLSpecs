// Copyright (C) 2003 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with GNU Emacs; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.util;


/** JML's specification of java.util.LinkedList.
 * @author Katie Becker
 * @author Gary T. Leavens
 * @author Erik Poll
 */

// Java 1.6: Differs from Java 1.5 in the added interface Deque<E>

public class LinkedList<E> extends AbstractSequentialList<E>
    implements List<E>, Cloneable, java.io.Serializable, Deque<E>
{
    
    /*-RAC@ public normal_behavior
      @   ensures isEmpty();
      @   ensures containsNull;
      @*/
    /*@ pure @*/ public LinkedList();
          
    /*-RAC@ public normal_behavior
      @   requires c != null;
      @   ensures containsNull == c.containsNull;
      @ also
      @   public exceptional_behavior
      @     requires c == null;
      @     signals_only NullPointerException;
      @*/
    /*@ pure @*/ public LinkedList(Collection<? extends E> c);
    
    /*-RAC@ also public normal_behavior
      @    requires !isEmpty();
      @    ensures !containsNull ==> \result != null;
      @    ensures \result == get(0);
      @ also
      @  public exceptional_behavior
      @    requires isEmpty();
      @    signals_only NoSuchElementException;
      @*/
    public /*@ spec_pure @*/ E getFirst();
    
    /*-RAC@ also public normal_behavior
      @    requires !isEmpty();
      @    ensures !containsNull ==> \result != null;
      @    ensures \result == get(size()-1);
      @ also
      @  public exceptional_behavior
      @    requires isEmpty();
      @    signals_only NoSuchElementException; 
      @*/
    public /*@ spec_pure @*/ E getLast();

    // inherited spec
    public E removeFirst();
 
    // inherited spec
    public E removeLast();
  
    // inherited spec
    public void addFirst(/*@ nullable */ E o);

    // inherited spec
    public void addLast(/*@ nullable */ E o);
    
    // -- all other methods are specified by List --
    //@ pure
    public boolean contains(Object o);
    
    //@ pure
    public int size();
    
    public boolean add(/*@ nullable */ E o);

    public boolean remove(Object o);
    
    public boolean addAll(Collection<? extends E> c);
    
    public boolean addAll(int index, Collection<? extends E> c);
    
    public void clear();
    
    //@ pure
    public E get(int index);
    
    public E set(int index, E element);
    
    public void add(int index, E element);
    
    public E remove(int index);
    
    //@ pure
    public int indexOf(Object o);
    
    //@ pure
    public int lastIndexOf(Object o);
    
    //@ pure
    public ListIterator<E> listIterator(int index);
    
    /*@ also
      @   public normal_behavior
      @       ensures \result instanceof LinkedList && \fresh(\result)
      @          && ((LinkedList)\result).equals(this);
      @       ensures_redundantly \result != this;
      @*/
    public /*@ pure @*/ Object clone();

    //@ pure
    public Object[] toArray();
    
    public <T> T[] toArray(T[] a);
}
