package java.util.concurrent.locks;

//@ non_null_by_default
public class LockSupport {
//      private static final sun.misc.Unsafe UNSAFE;
//      private static final long parkBlockerOffset;
//      private static final long SEED;
//      private static final long PROBE;
//      private static final long SECONDARY;
//      private java.util.concurrent.locks.LockSupport();
//      private static void setBlocker(java.lang.Thread, java.lang.Object);

      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public static void unpark(/*@ nullable */ java.lang.Thread thread);

      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public static void park(java.lang.Object object);  // FIXME - nullable?
//      public static void parkNanos(java.lang.Object, long);
//      public static void parkUntil(java.lang.Object, long);
//      public static java.lang.Object getBlocker(java.lang.Thread);
      
      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public static void park();
//      public static void parkNanos(long);
//      public static void parkUntil(long);
//      static final int nextSecondarySeed();
//      static {};
    }
