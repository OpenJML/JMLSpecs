// @(#)$Id: Integer.jml 2022 2006-08-13 02:36:42Z chalin $

// Copyright (C) 2002 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.lang;

/** JML's specification of java.lang.Integer.
 * @version $Revision: 2022 $
 * @author Brandon Shilling
 * @author Gary T. Leavens
 * @author David R. Cok
 */
//@ immutable
public  /*@ pure @*/ final
    class Integer extends Number implements Comparable {

    //@ public model int theInteger;  in objectState;
    //+RAC@ represents theInteger = intValue();

  /*-RAC@
    @   public normal_behavior
    @     ensures \result <==> Number.parseable( s, r, Integer.SIZE);
    @   model public helper static pure boolean parseable( String s, int r );
    @*/

  /*-RAC@
    @   public normal_behavior
    @     ensures \result <==> Number.decodable(nm, Integer.SIZE);
    @   model public helper static pure boolean decodable( String nm );
    @*/
          
    // FIXME: problem with undefined preconditions when using this axiom: -RAC-ESC@ axiom (\forall int r; (\forall String s, ss; s.equals(ss) && parseable(s,r) && parseable(ss,r) ==> parseInt(s,r) == parseInt(ss,r)));

    public static final int   MIN_VALUE = 0x80000000;

    public static final int   MAX_VALUE = 0x7FFFFFFF;

    public static final Class<Integer> TYPE = int.class;  // 1.5 DIFFERENCE
    
    //@ model public static final long MAX_UNSIGNED_INT = 0xffff_ffffL;
    
    //@ ensures TYPE == int.class;
    //@ static_initializer

    public static final int   SIZE = 32; // Number of bits in an int representation
    public static final int   BYTES = 4; // Number of bytes in an int representation
    
    /*-RAC@ public normal_behavior
      @   requires (Character.MIN_RADIX <= radix
      @             && radix <= Character.MAX_RADIX);
      @   ensures parseable(\result,radix);
      @   ensures i == parseInt(\result, radix);
      @ also public normal_behavior
      @   requires !(Character.MIN_RADIX <= radix
      @             && radix <= Character.MAX_RADIX);
      @   ensures parseable(\result,10);
      @   ensures i == parseInt(\result, 10);
      @ also public normal_behavior
      @   ensures \result != null;
      @   ensures i == 0 ==> \result.length() == 1;
      @   ensures i >  0 ==> \result.length() >= 1;
      @   ensures i <  0 ==> \result.length() >= 2;
      @   ensures i == 0 ==> \result.equals("0");
      @*/
    public static /*@ pure helper non_null @*/ String toString(int i,
                                                                  int radix);

    /*-RAC@ public normal_behavior
      @   ensures \result != null;
      @   ensures \result.length() >= 1;
      @ also public normal_behavior
      @   requires i >= 0;
      @   ensures parseable(\result,16);
      @   ensures \result.equals(toString(i, 16));
      @   ensures parseInt(\result,16) == i;
      @ also public normal_behavior
          // toHexString produces a hex string of the unsigned argument
          // for negative inputs this is a positive value too large for an int
      @   old long pos_i = (1L<<32) + i;
      @   requires i < 0;
      @   ensures Long.parseable(\result,16);
      @   ensures \result.equals(Long.toString(pos_i, 16));
      @   ensures (int)Long.parseLong(\result,16) == i;
      @*/
    public static /*@ pure @*/ /*@ non_null @*/ String toHexString(int i);

    /*-RAC@ public normal_behavior
      @   ensures \result != null;
      @   ensures \result.length() >= 1;
      @ also public normal_behavior
      @   requires i >= 0;
      @   ensures parseable(\result,8);
      @   ensures \result.equals(toString(i, 8));
      @   ensures parseInt(\result,8) == i;
      @ also public normal_behavior
          // toOctalString produces a octal string of the unsigned argument
          // for negative inputs this is a positive value too large for an int
      @   old long pos_i = (1L<<32) + i;
      @   requires i < 0;
      @   ensures Long.parseable(\result,8);
      @   ensures \result.equals(Long.toString(pos_i, 8));
      @   ensures (int)Long.parseLong(\result,8) == i;
      @*/
    public static /*@ pure @*/ /*@ non_null @*/ String toOctalString(int i);

    /*-RAC@ public normal_behavior
      @   ensures \result != null;
      @   ensures \result.length() >= 1;
      @ also public normal_behavior
      @   requires i >= 0;
      @   ensures parseable(\result,2);
      @   ensures \result.equals(toString(i, 2));
      @   ensures parseInt(\result,2) == i;
      @ also public normal_behavior
          // toBinaryString produces a binary string of the unsigned argument
          // for negative inputs this is a positive value too large for an int
      @   old long pos_i = (1L<<32) + i;
      @   requires i < 0;
      @   ensures Long.parseable(\result,2);
      @   ensures \result.equals(Long.toString(pos_i, 2));
      @   ensures (int)Long.parseLong(\result,2) == i;
      @*/
    public static /*@ pure @*/ /*@ non_null @*/ String toBinaryString(int i);
            

    /*-RAC@ public normal_behavior
      @   ensures \result != null;
      @   ensures parseable(\result, 10);
      @   ensures \result.equals(toString(i, 10));
      @   ensures i == parseInt(\result, 10);
      @   ensures i == 0 ==> \result.length() == 1;
      @   ensures i >  0 ==> \result.length() >= 1;
      @   ensures i <  0 ==> \result.length() >= 2;
      @   ensures i == 0 ==> \result.equals("0");
      @*/
    public static /*@ pure @*/ /*@ non_null @*/ String toString(int i);

    /*-RAC@
      @  public normal_behavior
      @    requires parseable(s, radix);
      @    ensures (* \result is the int of the string representation
      @               in the specified radix *);
      @ also 
      @ public exceptional_behavior
      @   requires !parseable(s, radix);
      @   signals_only NumberFormatException;
      @*/
    public static /*@ pure @*/ int parseInt(String s, int radix)
        throws NumberFormatException;
                
    /*-RAC@    public normal_behavior
      @      requires parseable(s, 10);
      @      ensures \result == parseInt(s, 10);
      @ also
      @    public exceptional_behavior
      @      requires !parseable(s, 10);
      @      signals_only NumberFormatException;
      @*/
    public static /*@ pure @*/ int parseInt(String s)
        throws NumberFormatException;
            
    /*-RAC@ public normal_behavior
      @   requires parseable(s, radix);
      @   ensures \result.intValue() == parseInt(s,radix);
      @ also
      @ public exceptional_behavior
      @   requires !parseable(s, radix);
      @   signals_only NumberFormatException;
      @*/
    public static /*@ pure @*/ /*@ non_null @*/
        Integer valueOf(String s, int radix)
        throws NumberFormatException;
    
    /*-RAC@ public normal_behavior
    @   requires parseable(s, 10);
    @   ensures \result.intValue() == parseInt(s,10);
    @ also
    @ public exceptional_behavior
    @   requires !parseable(s, 10);
    @   signals_only NumberFormatException;
    @*/
  public static /*@ pure @*/ /*@ non_null @*/ Integer valueOf(String s)
      throws NumberFormatException;

    /*@ public normal_behavior
     @   ensures \result.intValue() == i;
     @*/
    public static /*@ pure @*/ /*@ non_null @*/ Integer valueOf(int i);

    /*-RAC@ public normal_behavior
      @   ensures theInteger == value;
      @*/
    //@ pure
    public Integer(int value);
    
    /*-RAC@ public normal_behavior
      @   requires parseable(s, 10);
      @   ensures intValue() == parseInt(s);
      @ also
      @ public exceptional_behavior
      @   requires !parseable(s, 10);
      @   signals_only NumberFormatException;
      @*/
    //@ pure
    public Integer(String s) throws NumberFormatException ;
 
    /*@ also  // FIXME - this is not correct
      @   public normal_behavior
      @     ensures \result == (byte) theInteger;
      @*/
    public /*@ pure helper @*/ byte byteValue();
    
    /*@ also   // FIXME - this is not correct
      @   public normal_behavior
      @     ensures \result == (short) theInteger;
      @*/
    public /*@ pure helper @*/ short shortValue();

    /*@ also
      @   public normal_behavior
      @     ensures \result == theInteger;
      @*/
    public /*@ pure helper @*/ int intValue();
    
    /*@ also
      @   public normal_behavior
      @     ensures \result == (long) theInteger;
      @*/
    public /*@ pure helper @*/ long longValue();
    
    /*@ also
      @   public normal_behavior
      @      ensures \result == (float) theInteger;
      @*/
    public /*@ pure helper @*/ float floatValue();
    
    /*@ also
      @   public normal_behavior
      @     ensures \result == (double) theInteger;
      @*/
    public /*@ pure helper @*/ double doubleValue();
    
    // specification inherited from Object
    //@ also public normal_behavior
    //-RAC@   ensures parseable(\result, 10);
    //@   ensures Integer.parseInt(\result,10) == intValue();
    //@   ensures \result.equals(toString(intValue()));
    public /*@ non_null @*/ String toString();
            
    /*@ also
      @   public normal_behavior
      @     ensures \result == intValue();
      @*/
    public int hashCode();
   
    /*-RAC@ 
      @   public normal_behavior
      @     requires i != null && ii != null;
      @     ensures \result <==> (i.theInteger == ii.theInteger);
      @   also
      @   public normal_behavior
      @     requires i == null || ii == null;
      @     ensures \result <==> (i == ii);
      @ pure function
      @ public model static boolean equalsInteger(Integer i, Integer ii);
      @*/

    /*-RAC@ also
      @   public normal_behavior
      @     requires obj != null && (obj instanceof Integer);
      @     ensures \result <==> equalsInteger(this,(Integer)obj);
      @   also
      @   public normal_behavior
      @     requires obj == null || !(obj instanceof Integer);
      @     ensures !\result;
      @*/
    public boolean equals(Object obj);
  
    /*@ public normal_behavior
      @   ensures (\result == null && getInteger(nm,null) == null) ||
      @           \result.equals(getInteger(nm, null));
      @*/
    public static /*@ pure @*/
        Integer getInteger(String nm);

    /*@ public normal_behavior
      @   ensures \result.equals(getInteger(nm, new Integer(val)));
      @*/
    public static /*@ pure @*/ 
        Integer getInteger(String nm, int val);

    /*-RAC@ public normal_behavior
      @   requires nm != null && !nm.equals("") 
      @         && System.getProperty(nm) != null
      @         && decodable(System.getProperty(nm));
      @   ensures \result.equals(decode(System.getProperty(nm)));
      @ also
      @ public normal_behavior
      @   requires nm == null || nm.equals("") 
      @         || System.getProperty(nm) == null
      @         || !decodable(System.getProperty(nm));
      @   ensures \result == val || \result.equals(val);
      @*/
    //@ implies_that
    //@    ensures val != null ==> \result != null;
    public static /*@ pure @*/ 
        Integer getInteger(String nm, Integer val);
    
    /*-RAC@ public normal_behavior
      @   requires decodable(nm);
      @   ensures (* \result is a Integer representation of nm *);
      @ also
      @ public exceptional_behavior
      @   requires !decodable(nm);
      @   signals_only NumberFormatException;
      @*/
    public static /*@ pure @*/ /*@ non_null @*/
        Integer decode(/*@ non_null @*/ String nm)
        throws NumberFormatException;

    /*-RAC@ public normal_behavior
      @ requires anotherInteger != null;
      @ {|
      @   requires theInteger == anotherInteger.intValue();
      @   ensures \result == 0;
      @ also 
      @   requires theInteger < anotherInteger.intValue();
      @   ensures \result == -1;
      @ also
      @   requires theInteger > anotherInteger.intValue();
      @   ensures \result == 1;
      @ |}
      @ also public exceptional_behavior
      @   requires anotherInteger == null;
      @   signals_only NullPointerException;
      @*/
    public int compareTo(Integer anotherInteger);
            
//    /*@ also
//      @   public normal_behavior
//      @     requires o != null && (o instanceof Integer);
//      @     ensures \result == compareTo((Integer) o);
//      @ also
//      @   public exceptional_behavior
//      @     requires o != null && !(o instanceof Integer);
//      @     signals_only ClassCastException;
//      @ also public exceptional_behavior
//      @   requires o == null;
//      @   signals_only NullPointerException;
//      @*/
//    public int compareTo(Object o);
    
    /*@ public normal_behavior
      @     // We enumerate some cases that we need to avoid using bit arithmetic
      @   ensures (\result == 0) <==> (k == 0);
      @   ensures (\result == 1) <==> (k == 1 || k == 2 || k == 4 || k == 8 
      @                             || k == 16 || k == 32 || k == 64 || k == 128 
      @                             || k == 256 || k == 512 || k == 1024 || k == 0x800 
      @                             || k == 0x1000 || k == 0x2000 || k == 0x4000 || k == 0x8000 
      @                             || k == 0x1_0000 || k == 0x2_0000 || k == 0x4_0000 || k == 0x8_0000 
      @                             || k == 0x10_0000 || k == 0x20_0000 || k == 0x40_0000 || k == 0x80_0000 
      @                             || k == 0x100_0000 || k == 0x200_0000 || k == 0x400_0000 || k == 0x800_0000 
      @                             || k == 0x1000_0000 || k == 0x2000_0000 || k == 0x4000_0000 || k == 0x8000_0000 
      @                             );
      @ //   ensures \result == (
      @ //         (k&1) + ((k>>1)&1) + ((k>>2)&1) + ((k>>3)&1) +
      @ //         ((k>>4)&1) + ((k>>5)&1) + ((k>>6)&1) + ((k>>7)&1) +
      @ //         ((k>>8)&1) + ((k>>9)&1) + ((k>>10)&1) + ((k>>11)&1) +
      @ //         ((k>>12)&1) + ((k>>13)&1) + ((k>>14)&1) + ((k>>15)&1) +
      @ //         ((k>>16)&1) + ((k>>17)&1) + ((k>>18)&1) + ((k>>19)&1) +
      @ //         ((k>>20)&1) + ((k>>21)&1) + ((k>>22)&1) + ((k>>23)&1) +
      @ //         ((k>>24)&1) + ((k>>25)&1) + ((k>>26)&1) + ((k>>27)&1) +
      @ //         ((k>>28)&1) + ((k>>29)&1) + ((k>>30)&1) + ((k>>31)&1) );
      @*/ // OPENJML TODO - one could also add up table lookups on 4-bit quantities
          // OPENJML TODO - perhaps should implement using different specs when in 
          // OPENJML TODO - bitvector mode vs. not
    //@ pure function
    public static int bitCount(int k);

    //@ public normal_behavior
    //@   ensures \result == (b0*(0x100_0000) + Byte.asUnsigned(b1)*(0x1_0000) + Byte.asUnsigned(b2)*(0x100) + Byte.asUnsigned(b3));
    //@ model public static pure helper function int asInt(byte b0, byte b1, byte b2, byte b3);

    //@ public normal_behavior // Avoids bit arithmetic
    //@   ensures \result == (i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= MAX_UNSIGNED_INT;
    //@ pure helper function // FIXME - causes infeasibility if written as a function with separated ensures conjuncts
    //@ model public static long asUnsignedToLong(int i);
}
