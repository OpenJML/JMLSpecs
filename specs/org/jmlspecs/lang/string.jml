package org.jmlspecs.lang;

//@ immutable pure non_null_by_default
public final class string implements IJmlPrimitiveType, IJmlIntArrayLike {

    public String racValue; //@ in length;
    
    //@ model public \bigint length;
    //+RAC@ public represents length = racValue.length();

    //@ public invariant 0 <= length;
    
    //@ public normal_behavior
    //@     ensures \result.length == s.length();
    //-RAC@ ensures (\forall \bigint i; 0 <= i < \result.length; \result[i] == s.charAt((int)i));
    static public string string(String s);
  
    //@ public normal_behavior
    //@   ensures \result.length == 0;
    static public string empty();

    //@ public normal_behavior
    //@   ensures \result == (this.length == 0);
    public boolean isEmpty();
    
    
    //@ public normal_behavior
    //@     ensures \result.length == s.length();
    //-RAC@ ensures (\forall \bigint i; 0 <= i < \result.length; \result[i] == s.charAt((int)i));
    public static string of(String s);
  
    //@ public normal_behavior
    //@   ensures \result == length;
    //@ no_state 
    public long size();
    
    //@ public normal_behavior
    //@   ensures \result == this[i];
    //@ no_state
    public char get(int i);  // FIXME _ change argument to bigint eventually

    //@ public normal_behavior
    //@   ensures \result.length == s.length + ss.length;
    //-RAC@ ensures \forall int k; 0 <= k < s.length; \result[k] == s[k];
    //-RAC@ ensures \forall int k; 0 <= k < ss.length; \result[k+s.length] == ss[k];
    //@ no_state
    public static string concat(string s, string ss);
 
   
    //@ public normal_behavior
    //@     ensures \result.length == this.length;
    //@     ensures \result[i] == c;
    //-RAC@ ensures \forall \bigint j; j != i; \result[j] == this[j];
    //@     ensures this[i] == c ==> \result == this;
    //@ no_state 
    public string put(int i, char c);
 
    //@ public normal_behavior
    //-RAC@ ensures \result == (s.length == ss.length && (\forall \bigint i; 0 <= i < s.length; s[i] == ss[i] ));
    //@ no_state
    public static boolean eq(string s, string ss);
    
    //@ ensures false; // Not defined for JML primitive types. Use eq.
    public boolean equals(Object o);
    
    //@ public normal_behavior
    //@   ensures \result == (this == s || eq(this,s));
    //@ no_state
    public boolean eq(string s);


    //@ public normal_behavior
    //@   requires 0 <= j <= this.length;
    //@   ensures \result.length == this.length + 1;
    //-RAC@ ensures (\forall \bigint i;; (0 <= i < j) ==> (\result[i] == this[i]));
    //-RAC@ ensures (\forall \bigint i;; (j+1 <= i < \result.length) ==> (\result[i] == this[i-1]));
    //@   ensures \result[j] == v;
    //@ no_state 
    public string insert(int j, char v);// FIXME _ change int to bigint eventually

    //@ public normal_behavior
    //@   ensures \result.length == this.length + 1;
    //-RAC@ ensures (\forall \bigint i;; (0 <= i < this.length) ==> (\result[i] == this[i]));
    //@  ensures \result[this.length] == v;
    //@ no_state
    public string add(char v);

    //@ public normal_behavior
    //@   ensures \result.length == this.length + s.length;
    //@   ensures (\forall \bigint i; 0 <= i < this.length ; (\result[i] == this[i]));
    //@   ensures (\forall \bigint i; 0 <= i < s.length ; (\result[i+this.length] == this[i-1]));
    //@ no_state
    public string append(string s);

    //@ public normal_behavior
    //@   requires 0 <= j < this.length;
    //@   ensures \result.length == this.length - 1;
    //@   ensures (\forall \bigint i;; (0 <= i < j) ==> (\result[i] == this[i]));
    //@   ensures (\forall \bigint i;; (j <= i < \result.length) ==> (\result[i] == this[i+1]));
    //@  no_state
    public string remove(int j);
    
    //@ public normal_behavior
    //@   requires 0 <= start <= end <= this.length;
    //@   ensures \result.length == end - start;
    //@   ensures (\forall \bigint i;; (0 <= i < \result.length) ==> \result[i] == this[i+start]);
    //@ no_state 
    public string substring(int start, int end);
  

}
