package org.jmlspecs.lang;
public class TYPE {

    //@ model public Class<?> head;
    //@ model public java.util.List<TYPE> args;
    

    //@ public normal_behavior
    //@   ensures \result.head == h;
    //@   ensures \result.typeargs == args; // FIXME - no aliasing?
    //@ no_state
    //@ model public static TYPE make(Class<?> h, List<TYPE> args);
    
    //@ public normal_behavior
    //@   ensures \result == head;
    //@ no_state
    //@ model public TYPE erasure();
    
    //@ public normal_behavior
    //@   ensures \result == typeargs.size();
    //@ no_state
    //@ model public int numargs();
    
    //@ public normal_behavior
    //@   requires 0 <= i < typeargs.size();
    //@   ensures \result == typeargs.get(i);
    //@ no_state
    //@ model public TYPE typearg(int i);
    
    //@ public normal_behavior
    //@   ensures \result == (t1.head == t2.head && t1.typeargs.size() == t2.typeargs.size()
    //@      && (\foreall int i; 0 <= i < t1.typeargs.size(); eq(t1.typeargs.get(i), t2.typeargs.get(i))));
    //@ no_state
    //@ model public static boolean eq(TYPE t1, TYPE t2);
    
    //@ public normal_behavior
    //@   ensures \result == (t1.head <:= t2.head && t1.typeargs.size() == t2.typeargs.size()
    //@      && (\foreall int i; 0 <= i < t1.typeargs.size(); eq(t1.typeargs.get(i), t2.typeargs.get(i)));
    //@ no_state
    //@ model public static boolean subtype(TYPE t1, TYPE t2);
    
    // FIXME - isPrimitive, array types and element types
    
}